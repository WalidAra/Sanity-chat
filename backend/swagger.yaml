openapi: 3.0.0
info:
  title: Auth API
  version: 1.0.0
  description: API endpoints for user authentication and private features

paths:
  /api/public/auth/sign-up:
    post:
      tags:
        - Auth
      summary: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: secret123
                name:
                  type: string
                  example: John Doe
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Missing or invalid credentials / User already exists
        '500':
          description: Server error

  /api/public/auth/sign-in:
    post:
      tags:
        - Auth
      summary: Authenticate a user and return JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: secret123
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Missing credentials
        '401':
          description: Invalid password
        '404':
          description: User not found
        '500':
          description: Server error

  /api/private/user/:
    get:
      tags:
        - User
      summary: Get the authenticated user's profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    description: The authenticated user's data
                    example:
                      id: 123
                      email: user@example.com
                      name: John Doe
                  message:
                    type: string
                    example: User profile retrieved successfully
        '401':
          description: Unauthorized - missing or invalid token
        '500':
          description: Server error

  /api/private/user/search:
    get:
      tags:
        - User
      summary: Search user profiles by name
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: search
          schema:
            type: string
          required: true
          description: Name or keyword to search user profiles
      responses:
        '200':
          description: User profiles retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      example:
                        id: user123
                        name: Walid Araar
                        email: walid@example.com
                  message:
                    type: string
                    example: User profiles retrieved successfully
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /api/private/chat:
    get:
      tags:
        - Chat
      summary: Get all chats of the authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Chats retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Get all chats successfully
                  data:
                    type: array
                    items:
                      type: object
                      example:
                        id: chat123
                        participants: [user1, user2]
        '401':
          description: Unauthorized
        '500':
          description: Server error

    post:
      tags:
        - Chat
      summary: Create a new chat
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - members
              properties:
                name:
                  type: string
                  example: Study Group
                image:
                  type: string
                  format: uri
                  example: https://example.com/image.png
                isGroup:
                  type: boolean
                  example: true
                adminId:
                  type: string
                  example: user123
                members:
                  type: array
                  items:
                    type: string
                  example: ["user123", "user456"]
      responses:
        '201':
          description: Create new chat successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Create new chat successfully
                  data:
                    type: object
                    example:
                      id: chat789
                      name: Study Group
                      image: https://example.com/image.png
                      isGroup: true
                      adminId: user123
                      members: ["user123", "user456"]
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /api/private/chat/last:
    get:
      tags:
        - Chat
      summary: Get the last chat accessed by the authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Last chat retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Get last chat successfully
                  data:
                    type: object
                    example:
                      id: chat123
                      participants: [user1, user2]
        '404':
          description: No last chat found
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /api/private/chat/{id}:
    get:
      tags:
        - Chat
      summary: Get chat by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the chat
      responses:
        '200':
          description: Chat retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Get chat successfully
                  data:
                    type: object
                    example:
                      id: chat123
                      participants: [user1, user2]
        '404':
          description: Chat not found
        '401':
          description: Unauthorized
        '500':
          description: Server error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
